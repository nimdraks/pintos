./devices/partition.c:     From util-linux-2.12r/fdisk/i386_sys_types.c.
./devices/partition.c:      [0xfd] = "Linux raid autodetect",
./devices/shutdown.c:#ifdef USERPROG
./devices/shutdown.c:#ifdef FILESYS
./devices/shutdown.c:#ifdef FILESYS
./devices/shutdown.c:#ifdef FILESYS
./devices/shutdown.c:#ifdef USERPROG
./examples/cat.c:      int fd = open (argv[i]);
./examples/cat.c:      if (fd < 0) 
./examples/cat.c:          int bytes_read = read (fd, buffer, sizeof buffer);
./examples/cat.c:      close (fd);
./examples/cp.c:  int in_fd, out_fd;
./examples/cp.c:  in_fd = open (argv[1]);
./examples/cp.c:  if (in_fd < 0) 
./examples/cp.c:  if (!create (argv[2], filesize (in_fd))) 
./examples/cp.c:  out_fd = open (argv[2]);
./examples/cp.c:  if (out_fd < 0) 
./examples/cp.c:      int bytes_read = read (in_fd, buffer, sizeof buffer);
./examples/cp.c:      if (write (out_fd, buffer, bytes_read) != bytes_read) 
./examples/cmp.c:  int fd[2];
./examples/cmp.c:  fd[0] = open (argv[1]);
./examples/cmp.c:  if (fd[0] < 0) 
./examples/cmp.c:  fd[1] = open (argv[2]);
./examples/cmp.c:  if (fd[1] < 0) 
./examples/cmp.c:      pos = tell (fd[0]);
./examples/cmp.c:      bytes_read[0] = read (fd[0], buffer[0], sizeof buffer[0]);
./examples/cmp.c:      bytes_read[1] = read (fd[1], buffer[1], sizeof buffer[1]);
./examples/mcat.c:      int fd;
./examples/mcat.c:      fd = open (argv[i]);
./examples/mcat.c:      if (fd < 0) 
./examples/mcat.c:      size = filesize (fd);
./examples/mcat.c:      map = mmap (fd, data);
./examples/ls.c:  int dir_fd = open (dir);
./examples/ls.c:  if (dir_fd == -1) 
./examples/ls.c:  if (isdir (dir_fd))
./examples/ls.c:        printf (" (inumber %d)", inumber (dir_fd));
./examples/ls.c:      while (readdir (dir_fd, name)) 
./examples/ls.c:              int entry_fd;
./examples/ls.c:              entry_fd = open (full_name);
./examples/ls.c:              if (entry_fd != -1)
./examples/ls.c:                  if (isdir (entry_fd))
./examples/ls.c:                    printf ("%d-byte file", filesize (entry_fd));
./examples/ls.c:                  printf (", inumber %d", inumber (entry_fd));
./examples/ls.c:              close (entry_fd);
./examples/ls.c:  close (dir_fd);
./examples/hex-dump.c:      int fd = open (argv[i]);
./examples/hex-dump.c:      if (fd < 0) 
./examples/hex-dump.c:          int pos = tell (fd);
./examples/hex-dump.c:          int bytes_read = read (fd, buffer, sizeof buffer);
./examples/hex-dump.c:      close (fd);
./examples/pwd.c:  int fd = open (file_name);
./examples/pwd.c:  if (fd >= 0) 
./examples/pwd.c:      *inum = inumber (fd);
./examples/pwd.c:      close (fd);
./examples/pwd.c:      int parent_inum, parent_fd;
./examples/pwd.c:      parent_fd = open (name);
./examples/pwd.c:      if (parent_fd < 0)
./examples/pwd.c:      parent_inum = inumber (parent_fd);
./examples/pwd.c:          if (!readdir (parent_fd, namep) || !get_inumber (name, &test_inum)) 
./examples/pwd.c:              close (parent_fd);
./examples/pwd.c:      close (parent_fd);
./examples/mcp.c:  int in_fd, out_fd;
./examples/mcp.c:  in_fd = open (argv[1]);
./examples/mcp.c:  if (in_fd < 0) 
./examples/mcp.c:  size = filesize (in_fd);
./examples/mcp.c:  out_fd = open (argv[2]);
./examples/mcp.c:  if (out_fd < 0) 
./examples/mcp.c:  in_map = mmap (in_fd, in_data);
./examples/mcp.c:  out_map = mmap (out_fd, out_data);
./lib/kernel/bitmap.c:#ifdef FILESYS
./lib/kernel/bitmap.c:#ifdef FILESYS
./lib/kernel/bitmap.h:#ifdef FILESYS
./lib/syscall-nr.h:    SYS_ISDIR,                  /* Tests if a fd represents a directory. */
./lib/syscall-nr.h:    SYS_INUMBER                 /* Returns the inode number for a fd. */
./lib/limits.h:#ifdef __CHAR_UNSIGNED__
Binary file ./lib/user/.syscall.c.swn matches
./lib/user/syscall.c:filesize (int fd) 
./lib/user/syscall.c:  return syscall1 (SYS_FILESIZE, fd);
./lib/user/syscall.c:read (int fd, void *buffer, unsigned size)
./lib/user/syscall.c:  return syscall3 (SYS_READ, fd, buffer, size);
./lib/user/syscall.c:write (int fd, const void *buffer, unsigned size)
./lib/user/syscall.c:  return syscall3 (SYS_WRITE, fd, buffer, size);
./lib/user/syscall.c:seek (int fd, unsigned position) 
./lib/user/syscall.c:  syscall2 (SYS_SEEK, fd, position);
./lib/user/syscall.c:tell (int fd) 
./lib/user/syscall.c:  return syscall1 (SYS_TELL, fd);
./lib/user/syscall.c:close (int fd)
./lib/user/syscall.c:  syscall1 (SYS_CLOSE, fd);
./lib/user/syscall.c:mmap (int fd, void *addr)
./lib/user/syscall.c:  return syscall2 (SYS_MMAP, fd, addr);
./lib/user/syscall.c:readdir (int fd, char name[READDIR_MAX_LEN + 1]) 
./lib/user/syscall.c:  return syscall2 (SYS_READDIR, fd, name);
./lib/user/syscall.c:isdir (int fd) 
./lib/user/syscall.c:  return syscall1 (SYS_ISDIR, fd);
./lib/user/syscall.c:inumber (int fd) 
./lib/user/syscall.c:  return syscall1 (SYS_INUMBER, fd);
Binary file ./lib/user/.syscall.c.swp matches
Binary file ./lib/user/.syscall.c.swo matches
./lib/user/syscall.h:int filesize (int fd);
./lib/user/syscall.h:int read (int fd, void *buffer, unsigned length);
./lib/user/syscall.h:int write (int fd, const void *buffer, unsigned length);
./lib/user/syscall.h:void seek (int fd, unsigned position);
./lib/user/syscall.h:unsigned tell (int fd);
./lib/user/syscall.h:void close (int fd);
./lib/user/syscall.h:mapid_t mmap (int fd, void *addr);
./lib/user/syscall.h:bool readdir (int fd, char name[READDIR_MAX_LEN + 1]);
./lib/user/syscall.h:bool isdir (int fd);
./lib/user/syscall.h:int inumber (int fd);
./misc/bochs-2.2.6-page-fault-segv.patch: static int listen_socket_fd;
./misc/bochs-2.2.6-page-fault-segv.patch: static int socket_fd;
./tests/Make.tests:ifdef PROGS
./tests/vm/Make.tests:mmap-shuffle mmap-bad-fd mmap-clean mmap-inherit mmap-misalign		\
./tests/vm/Make.tests:tests/vm/mmap-bad-fd_SRC = tests/vm/mmap-bad-fd.c tests/lib.c tests/main.c
./tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) begin
./tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) try to mmap invalid fd
./tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) end
./tests/vm/mmap-bad-fd.ck:mmap-bad-fd: exit(0)
./tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) begin
./tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) try to mmap invalid fd
./tests/vm/mmap-bad-fd.ck:mmap-bad-fd: exit(-1)
./tests/vm/Rubric.robustness:1	mmap-bad-fd
./tests/vm/mmap-overlap.c:  int fd[2];
./tests/vm/mmap-overlap.c:  CHECK ((fd[0] = open ("zeros")) > 1, "open \"zeros\" once");
./tests/vm/mmap-overlap.c:  CHECK (mmap (fd[0], start) != MAP_FAILED, "mmap \"zeros\"");
./tests/vm/mmap-overlap.c:  CHECK ((fd[1] = open ("zeros")) > 1 && fd[0] != fd[1],
./tests/vm/mmap-overlap.c:  CHECK (mmap (fd[1], start + 4096) == MAP_FAILED,
./tests/vm/mmap-bad-fd.c:/* Tries to mmap an invalid fd,
./tests/vm/mmap-bad-fd.c:         "try to mmap invalid fd");
./tests/cksum.pm:   0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac,
./tests/cksum.pm:   0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b,
./tests/cksum.pm:   0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34,
./tests/cksum.pm:   0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80,
./tests/cksum.pm:   0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a,
./tests/cksum.pm:   0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
./tests/cksum.pm:   0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4, 0x89b8fd09,
./tests/userprog/Make.tests:close-stdout close-bad-fd read-normal read-bad-ptr read-boundary	\
./tests/userprog/Make.tests:read-zero read-stdout read-bad-fd write-normal write-bad-ptr		\
./tests/userprog/Make.tests:write-boundary write-zero write-stdin write-bad-fd exec-once exec-arg	\
./tests/userprog/Make.tests:wait-killed wait-bad-pid multi-recurse multi-child-fd rox-simple	\
./tests/userprog/Make.tests:tests/userprog/close-bad-fd_SRC = tests/userprog/close-bad-fd.c tests/main.c
./tests/userprog/Make.tests:tests/userprog/read-bad-fd_SRC = tests/userprog/read-bad-fd.c tests/main.c
./tests/userprog/Make.tests:tests/userprog/write-bad-fd_SRC = tests/userprog/write-bad-fd.c tests/main.c
./tests/userprog/Make.tests:tests/userprog/multi-child-fd_SRC = tests/userprog/multi-child-fd.c	\
./tests/userprog/Make.tests:tests/userprog/multi-child-fd_PUTFILES += tests/userprog/sample.txt
./tests/userprog/Make.tests:tests/userprog/multi-child-fd_PUTFILES += tests/userprog/child-close
./tests/userprog/write-stdin.c:/* Try writing to fd 0 (stdin), 
./tests/userprog/write-bad-fd.c:/* Tries to write to an invalid fd,
./tests/userprog/Rubric.robustness:2	close-bad-fd
./tests/userprog/Rubric.robustness:2	read-bad-fd
./tests/userprog/Rubric.robustness:2	write-bad-fd
./tests/userprog/Rubric.robustness:2	multi-child-fd
./tests/userprog/read-stdout.c:/* Try reading from fd 1 (stdout), 
./tests/userprog/close-bad-fd.c:/* Tries to close an invalid fd, which must either fail silently
./tests/userprog/read-bad-fd.c:/* Tries to read from an invalid fd,
./tests/userprog/no-vm/multi-oom.c:  int fd, fdmax = 126;
./tests/userprog/no-vm/multi-oom.c:  /* Open as many files as we can, up to fdmax.
./tests/userprog/no-vm/multi-oom.c:  for (fd = 0; fd < fdmax; fd++)
./tests/userprog/child-close.c:/* Child process run by multi-child-fd test.
./tests/userprog/write-bad-fd.ck:(write-bad-fd) begin
./tests/userprog/write-bad-fd.ck:(write-bad-fd) end
./tests/userprog/write-bad-fd.ck:write-bad-fd: exit(0)
./tests/userprog/write-bad-fd.ck:(write-bad-fd) begin
./tests/userprog/write-bad-fd.ck:write-bad-fd: exit(-1)
./tests/userprog/read-bad-fd.ck:(read-bad-fd) begin
./tests/userprog/read-bad-fd.ck:(read-bad-fd) end
./tests/userprog/read-bad-fd.ck:read-bad-fd: exit(0)
./tests/userprog/read-bad-fd.ck:(read-bad-fd) begin
./tests/userprog/read-bad-fd.ck:read-bad-fd: exit(-1)
./tests/userprog/close-bad-fd.ck:(close-bad-fd) begin
./tests/userprog/close-bad-fd.ck:(close-bad-fd) end
./tests/userprog/close-bad-fd.ck:close-bad-fd: exit(0)
./tests/userprog/close-bad-fd.ck:(close-bad-fd) begin
./tests/userprog/close-bad-fd.ck:close-bad-fd: exit(-1)
./tests/userprog/multi-child-fd.ck:(multi-child-fd) begin
./tests/userprog/multi-child-fd.ck:(multi-child-fd) open "sample.txt"
./tests/userprog/multi-child-fd.ck:(multi-child-fd) wait(exec()) = 0
./tests/userprog/multi-child-fd.ck:(multi-child-fd) verified contents of "sample.txt"
./tests/userprog/multi-child-fd.ck:(multi-child-fd) end
./tests/userprog/multi-child-fd.ck:multi-child-fd: exit(0)
./tests/userprog/multi-child-fd.ck:(multi-child-fd) begin
./tests/userprog/multi-child-fd.ck:(multi-child-fd) open "sample.txt"
./tests/userprog/multi-child-fd.ck:(multi-child-fd) wait(exec()) = -1
./tests/userprog/multi-child-fd.ck:(multi-child-fd) verified contents of "sample.txt"
./tests/userprog/multi-child-fd.ck:(multi-child-fd) end
./tests/userprog/multi-child-fd.ck:multi-child-fd: exit(0)
./tests/lib.c:check_file_handle (int fd,
./tests/lib.c:  file_size = filesize (fd);
./tests/lib.c:      ret_val = read (fd, block, block_size);
./tests/lib.c:  int fd;
./tests/lib.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\" for verification",
./tests/lib.c:  check_file_handle (fd, file_name, buf, size);
./tests/lib.c:  close (fd);
./tests/lib.h:void check_file_handle (int fd, const char *file_name,
./tests/filesys/seq-test.h:               void (*check_func) (int fd, long ofs));
./tests/filesys/base/syn-read.c:  int fd;
./tests/filesys/base/syn-read.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/base/syn-read.c:  CHECK (write (fd, buf, sizeof buf) > 0, "write \"%s\"", file_name);
./tests/filesys/base/syn-read.c:  close (fd);
./tests/filesys/base/child-syn-read.c:  int fd;
./tests/filesys/base/child-syn-read.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/base/child-syn-read.c:      CHECK (read (fd, &c, 1) > 0, "read \"%s\"", file_name);
./tests/filesys/base/child-syn-read.c:  close (fd);
./tests/filesys/base/syn-write.c:  int fd;
./tests/filesys/base/syn-write.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/base/syn-write.c:  CHECK (read (fd, buf1, sizeof buf1) > 0, "read \"%s\"", file_name);
./tests/filesys/base/syn-remove.c:  int fd;
./tests/filesys/base/syn-remove.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/base/syn-remove.c:  CHECK (write (fd, buf1, sizeof buf1) > 0, "write \"%s\"", file_name);
./tests/filesys/base/syn-remove.c:  seek (fd, 0);
./tests/filesys/base/syn-remove.c:  CHECK (read (fd, buf2, sizeof buf2) > 0, "read \"%s\"", file_name);
./tests/filesys/base/syn-remove.c:  close (fd);
./tests/filesys/base/random.inc:  int fd;
./tests/filesys/base/random.inc:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/base/random.inc:      seek (fd, ofs);
./tests/filesys/base/random.inc:      if (write (fd, buf + ofs, BLOCK_SIZE) != BLOCK_SIZE)
./tests/filesys/base/random.inc:      seek (fd, ofs);
./tests/filesys/base/random.inc:      if (read (fd, block, BLOCK_SIZE) != BLOCK_SIZE)
./tests/filesys/base/random.inc:  close (fd);
./tests/filesys/base/child-syn-wrt.c:  int fd;
./tests/filesys/base/child-syn-wrt.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/base/child-syn-wrt.c:  seek (fd, CHUNK_SIZE * child_idx);
./tests/filesys/base/child-syn-wrt.c:  CHECK (write (fd, buf + CHUNK_SIZE * child_idx, CHUNK_SIZE) > 0,
./tests/filesys/base/child-syn-wrt.c:  close (fd);
./tests/filesys/seq-test.c:          void (*check_func) (int fd, long ofs)) 
./tests/filesys/seq-test.c:  int fd;
./tests/filesys/seq-test.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/seq-test.c:      if (write (fd, buf + ofs, block_size) != (int) block_size)
./tests/filesys/seq-test.c:        check_func (fd, ofs);
./tests/filesys/seq-test.c:  close (fd);
./tests/filesys/extended/dir-vine.c:      int fd;
./tests/filesys/extended/dir-vine.c:      CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/extended/dir-vine.c:      if (write (fd, contents, strlen (contents)) != (int) strlen (contents)) 
./tests/filesys/extended/dir-vine.c:          close (fd);
./tests/filesys/extended/dir-vine.c:      close (fd);
./tests/filesys/extended/dir-vine.c:      CHECK ((fd = open (".")) > 1, "open \".\"");
./tests/filesys/extended/dir-vine.c:      CHECK (readdir (fd, name[0]), "readdir \".\"");
./tests/filesys/extended/dir-vine.c:      CHECK (readdir (fd, name[1]), "readdir \".\"");
./tests/filesys/extended/dir-vine.c:      CHECK (!readdir (fd, name[2]), "readdir \".\" (should fail)");
./tests/filesys/extended/dir-vine.c:      close (fd);
./tests/filesys/extended/tar.c:                          int archive_fd, bool *write_error);
./tests/filesys/extended/tar.c:static bool archive_ordinary_file (const char *file_name, int file_fd,
./tests/filesys/extended/tar.c:                                   int archive_fd, bool *write_error);
./tests/filesys/extended/tar.c:                               int file_fd, int archive_fd, bool *write_error);
./tests/filesys/extended/tar.c:                          int archive_fd, bool *write_error);
./tests/filesys/extended/tar.c:static bool do_write (int fd, const char *buffer, int size, bool *write_error);
./tests/filesys/extended/tar.c:  int archive_fd;
./tests/filesys/extended/tar.c:  archive_fd = open (archive_name);
./tests/filesys/extended/tar.c:  if (archive_fd < 0)
./tests/filesys/extended/tar.c:                         archive_fd, &write_error))
./tests/filesys/extended/tar.c:  if (!do_write (archive_fd, zeros, 512, &write_error)
./tests/filesys/extended/tar.c:      || !do_write (archive_fd, zeros, 512, &write_error)) 
./tests/filesys/extended/tar.c:  close (archive_fd);
./tests/filesys/extended/tar.c:              int archive_fd, bool *write_error) 
./tests/filesys/extended/tar.c:  int file_fd = open (file_name);
./tests/filesys/extended/tar.c:  if (file_fd >= 0) 
./tests/filesys/extended/tar.c:      if (inumber (file_fd) != inumber (archive_fd)) 
./tests/filesys/extended/tar.c:          if (!isdir (file_fd))
./tests/filesys/extended/tar.c:            success = archive_ordinary_file (file_name, file_fd,
./tests/filesys/extended/tar.c:                                             archive_fd, write_error);
./tests/filesys/extended/tar.c:            success = archive_directory (file_name, file_name_size, file_fd,
./tests/filesys/extended/tar.c:                                         archive_fd, write_error);      
./tests/filesys/extended/tar.c:      close (file_fd);
./tests/filesys/extended/tar.c:archive_ordinary_file (const char *file_name, int file_fd,
./tests/filesys/extended/tar.c:                       int archive_fd, bool *write_error)
./tests/filesys/extended/tar.c:  int file_size = filesize (file_fd);
./tests/filesys/extended/tar.c:                     archive_fd, write_error))
./tests/filesys/extended/tar.c:      int read_retval = read (file_fd, buf, chunk_size);
./tests/filesys/extended/tar.c:      if (!do_write (archive_fd, buf, 512, write_error))
./tests/filesys/extended/tar.c:archive_directory (char file_name[], size_t file_name_size, int file_fd,
./tests/filesys/extended/tar.c:                   int archive_fd, bool *write_error)
./tests/filesys/extended/tar.c:  if (!write_header (file_name, USTAR_DIRECTORY, 0, archive_fd, write_error))
./tests/filesys/extended/tar.c:  while (readdir (file_fd, &file_name[dir_len + 1])) 
./tests/filesys/extended/tar.c:    if (!archive_file (file_name, file_name_size, archive_fd, write_error))
./tests/filesys/extended/tar.c:              int archive_fd, bool *write_error) 
./tests/filesys/extended/tar.c:          && do_write (archive_fd, header, 512, write_error));
./tests/filesys/extended/tar.c:do_write (int fd, const char *buffer, int size, bool *write_error) 
./tests/filesys/extended/tar.c:  if (write (fd, buffer, size) == size) 
./tests/filesys/extended/syn-rw.c:  int fd;
./tests/filesys/extended/syn-rw.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/extended/syn-rw.c:    CHECK (write (fd, buf + ofs, CHUNK_SIZE) > 0,
./tests/filesys/extended/child-syn-rw.c:  int fd;
./tests/filesys/extended/child-syn-rw.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/extended/child-syn-rw.c:      int bytes_read = read (fd, buf2 + ofs, sizeof buf2 - ofs);
./tests/filesys/extended/child-syn-rw.c:  close (fd);
./tests/filesys/extended/mk-tree.c:  int fd;
./tests/filesys/extended/mk-tree.c:  CHECK ((fd = open (try)) > 1, "open \"%s\"", try);
./tests/filesys/extended/mk-tree.c:  close (fd);
./tests/filesys/extended/grow-file-size.c:check_file_size (int fd, long ofs) 
./tests/filesys/extended/grow-file-size.c:  long size = filesize (fd);
./tests/filesys/extended/grow-two-files.c:write_some_bytes (const char *file_name, int fd, const char *buf, size_t *ofs) 
./tests/filesys/extended/grow-two-files.c:      ret_val = write (fd, buf + *ofs, block_size);
./tests/filesys/extended/grow-two-files.c:  int fd_a, fd_b;
./tests/filesys/extended/grow-two-files.c:  CHECK ((fd_a = open ("a")) > 1, "open \"a\"");
./tests/filesys/extended/grow-two-files.c:  CHECK ((fd_b = open ("b")) > 1, "open \"b\"");
./tests/filesys/extended/grow-two-files.c:      write_some_bytes ("a", fd_a, buf_a, &ofs_a);
./tests/filesys/extended/grow-two-files.c:      write_some_bytes ("b", fd_b, buf_b, &ofs_b);
./tests/filesys/extended/grow-two-files.c:  close (fd_a);
./tests/filesys/extended/grow-two-files.c:  close (fd_b);
./tests/filesys/extended/grow-dir.inc:#ifdef DIRECTORY
./tests/filesys/extended/dir-rm-cwd.c:  static int fds[8], fd_cnt;
./tests/filesys/extended/dir-rm-cwd.c:  int fd, i;
./tests/filesys/extended/dir-rm-cwd.c:  CHECK ((fd = open (name)) > 1, "open \"%s\"", name);
./tests/filesys/extended/dir-rm-cwd.c:  for (i = 0; i < fd_cnt; i++)
./tests/filesys/extended/dir-rm-cwd.c:    if (fds[i] == fd)
./tests/filesys/extended/dir-rm-cwd.c:      fail ("fd returned is not unique");
./tests/filesys/extended/dir-rm-cwd.c:  fds[fd_cnt++] = fd;
./tests/filesys/extended/dir-rm-cwd.c:  return fd;
./tests/filesys/extended/dir-rm-cwd.c:  int root_fd, a_fd0;
./tests/filesys/extended/dir-rm-cwd.c:  root_fd = wrap_open ("/");
./tests/filesys/extended/dir-rm-cwd.c:  a_fd0 = wrap_open ("/a");
./tests/filesys/extended/dir-rm-cwd.c:  CHECK (!readdir (a_fd0, name), "verify \"/a\" is empty");
./tests/filesys/extended/dir-rm-cwd.c:  CHECK (inumber (root_fd) != inumber (a_fd0),
./tests/filesys/extended/dir-rm-cwd.c:      int a_fd1, a_fd2, a_fd3;
./tests/filesys/extended/dir-rm-cwd.c:      a_fd1 = wrap_open ("/a");
./tests/filesys/extended/dir-rm-cwd.c:      a_fd2 = wrap_open (".");
./tests/filesys/extended/dir-rm-cwd.c:      CHECK (inumber (a_fd1) == inumber (a_fd2),
./tests/filesys/extended/dir-rm-cwd.c:      CHECK (inumber (root_fd) != inumber (a_fd1),
./tests/filesys/extended/dir-rm-cwd.c:      a_fd3 = wrap_open (".");
./tests/filesys/extended/dir-rm-cwd.c:      CHECK (inumber (a_fd3) == inumber (a_fd1),
./tests/filesys/extended/dir-rm-cwd.c:  CHECK (!readdir (a_fd0, name), "verify \"/a\" is empty");
./tests/filesys/extended/grow-sparse.c:  int fd;
./tests/filesys/extended/grow-sparse.c:  CHECK ((fd = open (file_name)) > 1, "open \"%s\"", file_name);
./tests/filesys/extended/grow-sparse.c:  seek (fd, sizeof buf - 1);
./tests/filesys/extended/grow-sparse.c:  CHECK (write (fd, &zero, 1) > 0, "write \"%s\"", file_name);
./tests/filesys/extended/grow-sparse.c:  close (fd);
./tests/filesys/extended/dir-open.c:  int fd;
./tests/filesys/extended/dir-open.c:  CHECK ((fd = open ("xyzzy")) > 1, "open \"xyzzy\"");
./tests/filesys/extended/dir-open.c:  retval = write (fd, "foobar", 6);
./tests/filesys/extended/grow-tell.c:check_tell (int fd, long ofs) 
./tests/filesys/extended/grow-tell.c:  long pos = tell (fd);
./tests/cksum.c:  0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac,
./tests/cksum.c:  0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b,
./tests/cksum.c:  0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34,
./tests/cksum.c:  0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80,
./tests/cksum.c:  0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a,
./tests/cksum.c:  0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
./tests/cksum.c:  0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4, 0x89b8fd09,
./tests/cksum.c:#ifdef STANDALONE_TEST
./threads/thread.h:#ifdef USERPROG
Binary file ./threads/.thread.h.swp matches
./threads/:q!:#ifdef USERPROG
./threads/:q!:#ifdef USERPROG
./threads/:q!:#ifdef USERPROG
./threads/:q!:#ifdef USERPROG
./threads/init.c:#ifdef USERPROG
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef VM
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef USERPROG
./threads/init.c:#ifdef USERPROG
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef VM
./threads/init.c:#ifdef USERPROG
./threads/init.c:#ifdef USERPROG
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef USERPROG
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef VM
./threads/init.c:#ifdef USERPROG
./threads/init.c:#ifdef FILESYS
./threads/init.c:#ifdef VM
Binary file ./threads/.thread.c.swo matches
Binary file ./threads/.thread.h.swo matches
./threads/intr-stubs.S:STUB(fc, zero) STUB(fd, zero) STUB(fe, zero) STUB(ff, zero)
./threads/thread.c:#ifdef USERPROG
./threads/thread.c:#ifdef USERPROG
./threads/thread.c:#ifdef USERPROG
./threads/thread.c:#ifdef USERPROG
Binary file ./threads/build/threads/intr-stubs.o matches
Binary file ./threads/build/kernel.o matches
Binary file ./threads/.thread.c.swn matches
./userprog/make_result:gcc -m32 -c ../../tests/userprog/close-bad-fd.c -o tests/userprog/close-bad-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/close-bad-fd.d
./userprog/make_result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/close-bad-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/close-bad-fd
./userprog/make_result:gcc -m32 -c ../../tests/userprog/read-bad-fd.c -o tests/userprog/read-bad-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/read-bad-fd.d
./userprog/make_result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/read-bad-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/read-bad-fd
./userprog/make_result:gcc -m32 -c ../../tests/userprog/write-bad-fd.c -o tests/userprog/write-bad-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/write-bad-fd.d
./userprog/make_result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/write-bad-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/write-bad-fd
./userprog/make_result:gcc -m32 -c ../../tests/userprog/multi-child-fd.c -o tests/userprog/multi-child-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/multi-child-fd.d
./userprog/make_result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/multi-child-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/multi-child-fd
./userprog/make_check_result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-bad-fd -a close-bad-fd -- -q    -f run close-bad-fd < /dev/null 2> tests/userprog/close-bad-fd.errors |tee tests/userprog/close-bad-fd.output
./userprog/make_check_result:Copying tests/userprog/close-bad-fd to scratch partition...
./userprog/make_check_result:Kernel command line: -q -f extract run close-bad-fd
./userprog/make_check_result:Putting 'close-bad-fd' into the file system...
./userprog/make_check_result:Executing 'close-bad-fd':
./userprog/make_check_result:Execution of 'close-bad-fd' complete.
./userprog/make_check_result:perl -I../.. ../../tests/userprog/close-bad-fd.ck tests/userprog/close-bad-fd tests/userprog/close-bad-fd.result
./userprog/make_check_result:FAIL tests/userprog/close-bad-fd
./userprog/make_check_result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-bad-fd -a read-bad-fd -- -q    -f run read-bad-fd < /dev/null 2> tests/userprog/read-bad-fd.errors |tee tests/userprog/read-bad-fd.output
./userprog/make_check_result:Copying tests/userprog/read-bad-fd to scratch partition...
./userprog/make_check_result:Kernel command line: -q -f extract run read-bad-fd
./userprog/make_check_result:Putting 'read-bad-fd' into the file system...
./userprog/make_check_result:Executing 'read-bad-fd':
./userprog/make_check_result:Execution of 'read-bad-fd' complete.
./userprog/make_check_result:perl -I../.. ../../tests/userprog/read-bad-fd.ck tests/userprog/read-bad-fd tests/userprog/read-bad-fd.result
./userprog/make_check_result:FAIL tests/userprog/read-bad-fd
./userprog/make_check_result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-bad-fd -a write-bad-fd -- -q    -f run write-bad-fd < /dev/null 2> tests/userprog/write-bad-fd.errors |tee tests/userprog/write-bad-fd.output
./userprog/make_check_result:Copying tests/userprog/write-bad-fd to scratch partition...
./userprog/make_check_result:Kernel command line: -q -f extract run write-bad-fd
./userprog/make_check_result:Putting 'write-bad-fd' into the file system...
./userprog/make_check_result:Executing 'write-bad-fd':
./userprog/make_check_result:Execution of 'write-bad-fd' complete.
./userprog/make_check_result:perl -I../.. ../../tests/userprog/write-bad-fd.ck tests/userprog/write-bad-fd tests/userprog/write-bad-fd.result
./userprog/make_check_result:FAIL tests/userprog/write-bad-fd
./userprog/make_check_result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/multi-child-fd -a multi-child-fd -p ../../tests/userprog/sample.txt -a sample.txt -p tests/userprog/child-close -a child-close -- -q    -f run multi-child-fd < /dev/null 2> tests/userprog/multi-child-fd.errors |tee tests/userprog/multi-child-fd.output
./userprog/make_check_result:Copying tests/userprog/multi-child-fd to scratch partition...
./userprog/make_check_result:Kernel command line: -q -f extract run multi-child-fd
./userprog/make_check_result:Putting 'multi-child-fd' into the file system...
./userprog/make_check_result:Executing 'multi-child-fd':
./userprog/make_check_result:Execution of 'multi-child-fd' complete.
./userprog/make_check_result:perl -I../.. ../../tests/userprog/multi-child-fd.ck tests/userprog/multi-child-fd tests/userprog/multi-child-fd.result
./userprog/make_check_result:FAIL tests/userprog/multi-child-fd
./userprog/make_check_result:FAIL tests/userprog/close-bad-fd
./userprog/make_check_result:FAIL tests/userprog/read-bad-fd
./userprog/make_check_result:FAIL tests/userprog/write-bad-fd
./userprog/make_check_result:FAIL tests/userprog/multi-child-fd
./userprog/result:gcc -m32 -c ../../tests/userprog/close-bad-fd.c -o tests/userprog/close-bad-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/close-bad-fd.d
./userprog/result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/close-bad-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/close-bad-fd
./userprog/result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-bad-fd -a close-bad-fd -- -q    -f run close-bad-fd < /dev/null 2> tests/userprog/close-bad-fd.errors |tee tests/userprog/close-bad-fd.output
./userprog/result:Copying tests/userprog/close-bad-fd to scratch partition...
./userprog/result:Kernel command line: -q -f extract run close-bad-fd
./userprog/result:Putting 'close-bad-fd' into the file system...
./userprog/result:Executing 'close-bad-fd':
./userprog/result:(close-bad-fd) begin
./userprog/result:(close-bad-fd) end
./userprog/result:close-bad-fd: exit(0)
./userprog/result:Execution of 'close-bad-fd' complete.
./userprog/result:perl -I../.. ../../tests/userprog/close-bad-fd.ck tests/userprog/close-bad-fd tests/userprog/close-bad-fd.result
./userprog/result:pass tests/userprog/close-bad-fd
./userprog/result:gcc -m32 -c ../../tests/userprog/read-bad-fd.c -o tests/userprog/read-bad-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/read-bad-fd.d
./userprog/result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/read-bad-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/read-bad-fd
./userprog/result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-bad-fd -a read-bad-fd -- -q    -f run read-bad-fd < /dev/null 2> tests/userprog/read-bad-fd.errors |tee tests/userprog/read-bad-fd.output
./userprog/result:Copying tests/userprog/read-bad-fd to scratch partition...
./userprog/result:Kernel command line: -q -f extract run read-bad-fd
./userprog/result:Putting 'read-bad-fd' into the file system...
./userprog/result:Executing 'read-bad-fd':
./userprog/result:(read-bad-fd) begin
./userprog/result:(read-bad-fd) end
./userprog/result:read-bad-fd: exit(0)
./userprog/result:Execution of 'read-bad-fd' complete.
./userprog/result:perl -I../.. ../../tests/userprog/read-bad-fd.ck tests/userprog/read-bad-fd tests/userprog/read-bad-fd.result
./userprog/result:pass tests/userprog/read-bad-fd
./userprog/result:gcc -m32 -c ../../tests/userprog/write-bad-fd.c -o tests/userprog/write-bad-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/write-bad-fd.d
./userprog/result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/write-bad-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/write-bad-fd
./userprog/result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-bad-fd -a write-bad-fd -- -q    -f run write-bad-fd < /dev/null 2> tests/userprog/write-bad-fd.errors |tee tests/userprog/write-bad-fd.output
./userprog/result:Copying tests/userprog/write-bad-fd to scratch partition...
./userprog/result:Kernel command line: -q -f extract run write-bad-fd
./userprog/result:Putting 'write-bad-fd' into the file system...
./userprog/result:Executing 'write-bad-fd':
./userprog/result:(write-bad-fd) begin
./userprog/result:{{{{{{{(write-bad-fd) end
./userprog/result:write-bad-fd: exit(0)
./userprog/result:Execution of 'write-bad-fd' complete.
./userprog/result:perl -I../.. ../../tests/userprog/write-bad-fd.ck tests/userprog/write-bad-fd tests/userprog/write-bad-fd.result
./userprog/result:FAIL tests/userprog/write-bad-fd
./userprog/result:  (write-bad-fd) begin
./userprog/result:  write-bad-fd: exit(-1)
./userprog/result:  (write-bad-fd) begin
./userprog/result:- write-bad-fd: exit(-1)
./userprog/result:+ {{{{{{{(write-bad-fd) end
./userprog/result:+ write-bad-fd: exit(0)
./userprog/result:  (write-bad-fd) begin
./userprog/result:  (write-bad-fd) end
./userprog/result:  write-bad-fd: exit(0)
./userprog/result:  (write-bad-fd) begin
./userprog/result:- (write-bad-fd) end
./userprog/result:+ {{{{{{{(write-bad-fd) end
./userprog/result:  write-bad-fd: exit(0)
./userprog/result:gcc -m32 -c ../../tests/userprog/multi-child-fd.c -o tests/userprog/multi-child-fd.o -g -msoft-float  -fno-stack-protector -nostdinc -I../.. -I../../lib -I../../lib/user -I. -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers  -MMD -MF tests/userprog/multi-child-fd.d
./userprog/result:gcc -m32  -Wl,--build-id=none -nostdlib -static -Wl,-T,../../lib/user/user.lds tests/userprog/multi-child-fd.o tests/main.o tests/lib.o lib/user/entry.o libc.a -o tests/userprog/multi-child-fd
./userprog/result:pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/multi-child-fd -a multi-child-fd -p ../../tests/userprog/sample.txt -a sample.txt -p tests/userprog/child-close -a child-close -- -q    -f run multi-child-fd < /dev/null 2> tests/userprog/multi-child-fd.errors |tee tests/userprog/multi-child-fd.output
./userprog/result:Copying tests/userprog/multi-child-fd to scratch partition...
./userprog/result:Kernel command line: -q -f extract run multi-child-fd
./userprog/result:Putting 'multi-child-fd' into the file system...
./userprog/result:Executing 'multi-child-fd':
./userprog/result:(multi-child-fd) begin
./userprog/result:(multi-child-fd) open "sample.txt"
./userprog/result:(multi-child-fd) wait(exec()) = -1073742068
./userprog/result:(multi-child-fd) size of sample.txt (35) differs from expected (239)
./userprog/result:(multi-child-fd) read of 239 bytes at offset 0 in "sample.txt" returned 35: FAILED
./userprog/result:multi-child-fd: exit(1)
./userprog/result:Execution of 'multi-child-fd' complete.
./userprog/result:perl -I../.. ../../tests/userprog/multi-child-fd.ck tests/userprog/multi-child-fd tests/userprog/multi-child-fd.result
./userprog/result:FAIL tests/userprog/multi-child-fd
./userprog/result:pass tests/userprog/close-bad-fd
./userprog/result:pass tests/userprog/read-bad-fd
./userprog/result:FAIL tests/userprog/write-bad-fd
./userprog/result:FAIL tests/userprog/multi-child-fd
Binary file ./userprog/build/libc.a matches
Binary file ./userprog/build/tests/userprog/open-missing matches
Binary file ./userprog/build/tests/userprog/args-multiple matches
Binary file ./userprog/build/tests/userprog/sc-boundary-2 matches
Binary file ./userprog/build/tests/userprog/close-stdin matches
Binary file ./userprog/build/tests/userprog/rox-child matches
Binary file ./userprog/build/tests/userprog/open-twice matches
Binary file ./userprog/build/tests/userprog/child-bad matches
Binary file ./userprog/build/tests/userprog/read-bad-fd matches
Binary file ./userprog/build/tests/userprog/sc-bad-arg matches
Binary file ./userprog/build/tests/userprog/wait-bad-pid matches
Binary file ./userprog/build/tests/userprog/read-bad-ptr matches
Binary file ./userprog/build/tests/userprog/sc-bad-sp matches
Binary file ./userprog/build/tests/userprog/bad-read2 matches
Binary file ./userprog/build/tests/userprog/create-bad-ptr matches
./userprog/build/tests/userprog/multi-child-fd.output:Copying tests/userprog/multi-child-fd to scratch partition...
./userprog/build/tests/userprog/multi-child-fd.output:Kernel command line: -q -f extract run multi-child-fd
./userprog/build/tests/userprog/multi-child-fd.output:Putting 'multi-child-fd' into the file system...
./userprog/build/tests/userprog/multi-child-fd.output:Executing 'multi-child-fd':
./userprog/build/tests/userprog/multi-child-fd.output:(multi-child-fd) begin
./userprog/build/tests/userprog/multi-child-fd.output:(multi-child-fd) open "sample.txt"
./userprog/build/tests/userprog/multi-child-fd.output:(multi-child-fd) wait(exec()) = -1073742068
./userprog/build/tests/userprog/multi-child-fd.output:(multi-child-fd) size of sample.txt (35) differs from expected (239)
./userprog/build/tests/userprog/multi-child-fd.output:(multi-child-fd) read of 239 bytes at offset 0 in "sample.txt" returned 35: FAILED
./userprog/build/tests/userprog/multi-child-fd.output:multi-child-fd: exit(1)
./userprog/build/tests/userprog/multi-child-fd.output:Execution of 'multi-child-fd' complete.
Binary file ./userprog/build/tests/userprog/read-zero matches
Binary file ./userprog/build/tests/userprog/write-bad-fd matches
Binary file ./userprog/build/tests/userprog/open-normal matches
Binary file ./userprog/build/tests/userprog/multi-recurse matches
./userprog/build/tests/userprog/close-bad-fd.d:tests/userprog/close-bad-fd.o: ../../tests/userprog/close-bad-fd.c \
Binary file ./userprog/build/tests/userprog/close-bad-fd.o matches
Binary file ./userprog/build/tests/userprog/exit matches
Binary file ./userprog/build/tests/userprog/halt matches
Binary file ./userprog/build/tests/userprog/wait-twice matches
Binary file ./userprog/build/tests/userprog/child-close matches
./userprog/build/tests/userprog/close-bad-fd.output:Copying tests/userprog/close-bad-fd to scratch partition...
./userprog/build/tests/userprog/close-bad-fd.output:Kernel command line: -q -f extract run close-bad-fd
./userprog/build/tests/userprog/close-bad-fd.output:Putting 'close-bad-fd' into the file system...
./userprog/build/tests/userprog/close-bad-fd.output:Executing 'close-bad-fd':
./userprog/build/tests/userprog/close-bad-fd.output:(close-bad-fd) begin
./userprog/build/tests/userprog/close-bad-fd.output:(close-bad-fd) end
./userprog/build/tests/userprog/close-bad-fd.output:close-bad-fd: exit(0)
./userprog/build/tests/userprog/close-bad-fd.output:Execution of 'close-bad-fd' complete.
Binary file ./userprog/build/tests/userprog/create-bound matches
Binary file ./userprog/build/tests/userprog/wait-simple matches
Binary file ./userprog/build/tests/userprog/exec-multiple matches
./userprog/build/tests/userprog/write-bad-fd.d:tests/userprog/write-bad-fd.o: ../../tests/userprog/write-bad-fd.c \
Binary file ./userprog/build/tests/userprog/create-long matches
Binary file ./userprog/build/tests/userprog/child-rox matches
Binary file ./userprog/build/tests/userprog/write-normal matches
Binary file ./userprog/build/tests/userprog/write-bad-ptr matches
Binary file ./userprog/build/tests/userprog/read-normal matches
./userprog/build/tests/userprog/write-bad-fd.output:Copying tests/userprog/write-bad-fd to scratch partition...
./userprog/build/tests/userprog/write-bad-fd.output:Kernel command line: -q -f extract run write-bad-fd
./userprog/build/tests/userprog/write-bad-fd.output:Putting 'write-bad-fd' into the file system...
./userprog/build/tests/userprog/write-bad-fd.output:Executing 'write-bad-fd':
./userprog/build/tests/userprog/write-bad-fd.output:(write-bad-fd) begin
./userprog/build/tests/userprog/write-bad-fd.output:{{{{{{{(write-bad-fd) end
./userprog/build/tests/userprog/write-bad-fd.output:write-bad-fd: exit(0)
./userprog/build/tests/userprog/write-bad-fd.output:Execution of 'write-bad-fd' complete.
Binary file ./userprog/build/tests/userprog/rox-multichild matches
Binary file ./userprog/build/tests/userprog/write-zero matches
Binary file ./userprog/build/tests/userprog/read-boundary matches
Binary file ./userprog/build/tests/userprog/args-single matches
Binary file ./userprog/build/tests/userprog/exec-arg matches
Binary file ./userprog/build/tests/userprog/args-dbl-space matches
Binary file ./userprog/build/tests/userprog/close-bad-fd matches
Binary file ./userprog/build/tests/userprog/multi-child-fd matches
Binary file ./userprog/build/tests/userprog/exec-once matches
Binary file ./userprog/build/tests/userprog/bad-write2 matches
Binary file ./userprog/build/tests/userprog/bad-read matches
Binary file ./userprog/build/tests/userprog/create-normal matches
Binary file ./userprog/build/tests/userprog/args-many matches
Binary file ./userprog/build/tests/userprog/open-bad-ptr matches
Binary file ./userprog/build/tests/userprog/args-none matches
Binary file ./userprog/build/tests/userprog/rox-simple matches
Binary file ./userprog/build/tests/userprog/close-normal matches
Binary file ./userprog/build/tests/userprog/open-empty matches
./userprog/build/tests/userprog/read-bad-fd.d:tests/userprog/read-bad-fd.o: ../../tests/userprog/read-bad-fd.c \
./userprog/build/tests/userprog/write-bad-fd.result:  (write-bad-fd) begin
./userprog/build/tests/userprog/write-bad-fd.result:  (write-bad-fd) end
./userprog/build/tests/userprog/write-bad-fd.result:  write-bad-fd: exit(0)
./userprog/build/tests/userprog/write-bad-fd.result:  (write-bad-fd) begin
./userprog/build/tests/userprog/write-bad-fd.result:- (write-bad-fd) end
./userprog/build/tests/userprog/write-bad-fd.result:+ {{{{{{{(write-bad-fd) end
./userprog/build/tests/userprog/write-bad-fd.result:  write-bad-fd: exit(0)
./userprog/build/tests/userprog/write-bad-fd.result:  (write-bad-fd) begin
./userprog/build/tests/userprog/write-bad-fd.result:  write-bad-fd: exit(-1)
./userprog/build/tests/userprog/write-bad-fd.result:  (write-bad-fd) begin
./userprog/build/tests/userprog/write-bad-fd.result:- write-bad-fd: exit(-1)
./userprog/build/tests/userprog/write-bad-fd.result:+ {{{{{{{(write-bad-fd) end
./userprog/build/tests/userprog/write-bad-fd.result:+ write-bad-fd: exit(0)
Binary file ./userprog/build/tests/userprog/multi-child-fd.o matches
Binary file ./userprog/build/tests/userprog/read-stdout matches
Binary file ./userprog/build/tests/userprog/open-boundary matches
Binary file ./userprog/build/tests/userprog/close-twice matches
Binary file ./userprog/build/tests/userprog/create-exists matches
Binary file ./userprog/build/tests/userprog/write-stdin matches
Binary file ./userprog/build/tests/userprog/no-vm/multi-oom.o matches
Binary file ./userprog/build/tests/userprog/no-vm/multi-oom matches
./userprog/build/tests/userprog/read-bad-fd.output:Copying tests/userprog/read-bad-fd to scratch partition...
./userprog/build/tests/userprog/read-bad-fd.output:Kernel command line: -q -f extract run read-bad-fd
./userprog/build/tests/userprog/read-bad-fd.output:Putting 'read-bad-fd' into the file system...
./userprog/build/tests/userprog/read-bad-fd.output:Executing 'read-bad-fd':
./userprog/build/tests/userprog/read-bad-fd.output:(read-bad-fd) begin
./userprog/build/tests/userprog/read-bad-fd.output:(read-bad-fd) end
./userprog/build/tests/userprog/read-bad-fd.output:read-bad-fd: exit(0)
./userprog/build/tests/userprog/read-bad-fd.output:Execution of 'read-bad-fd' complete.
./userprog/build/tests/userprog/multi-child-fd.d:tests/userprog/multi-child-fd.o: ../../tests/userprog/multi-child-fd.c \
Binary file ./userprog/build/tests/userprog/open-null matches
Binary file ./userprog/build/tests/userprog/write-boundary matches
Binary file ./userprog/build/tests/userprog/sc-boundary matches
Binary file ./userprog/build/tests/userprog/write-bad-fd.o matches
Binary file ./userprog/build/tests/userprog/bad-jump2 matches
Binary file ./userprog/build/tests/userprog/child-args matches
Binary file ./userprog/build/tests/userprog/read-bad-fd.o matches
Binary file ./userprog/build/tests/userprog/close-stdout matches
Binary file ./userprog/build/tests/userprog/create-null matches
Binary file ./userprog/build/tests/userprog/bad-write matches
Binary file ./userprog/build/tests/userprog/exec-missing matches
Binary file ./userprog/build/tests/userprog/child-simple matches
Binary file ./userprog/build/tests/userprog/wait-killed matches
Binary file ./userprog/build/tests/userprog/exec-bad-ptr matches
Binary file ./userprog/build/tests/userprog/create-empty matches
Binary file ./userprog/build/tests/userprog/bad-jump matches
Binary file ./userprog/build/tests/lib.o matches
Binary file ./userprog/build/tests/filesys/base/syn-read.o matches
Binary file ./userprog/build/tests/filesys/base/child-syn-read.o matches
Binary file ./userprog/build/tests/filesys/base/sm-random matches
Binary file ./userprog/build/tests/filesys/base/sm-create matches
Binary file ./userprog/build/tests/filesys/base/syn-write matches
Binary file ./userprog/build/tests/filesys/base/sm-full matches
Binary file ./userprog/build/tests/filesys/base/lg-create matches
Binary file ./userprog/build/tests/filesys/base/sm-random.o matches
Binary file ./userprog/build/tests/filesys/base/lg-random.o matches
Binary file ./userprog/build/tests/filesys/base/syn-write.o matches
Binary file ./userprog/build/tests/filesys/base/lg-full matches
Binary file ./userprog/build/tests/filesys/base/lg-seq-block matches
Binary file ./userprog/build/tests/filesys/base/child-syn-wrt matches
Binary file ./userprog/build/tests/filesys/base/lg-random matches
Binary file ./userprog/build/tests/filesys/base/sm-seq-block matches
Binary file ./userprog/build/tests/filesys/base/syn-read matches
Binary file ./userprog/build/tests/filesys/base/sm-seq-random matches
Binary file ./userprog/build/tests/filesys/base/syn-remove.o matches
Binary file ./userprog/build/tests/filesys/base/child-syn-read matches
Binary file ./userprog/build/tests/filesys/base/syn-remove matches
Binary file ./userprog/build/tests/filesys/base/child-syn-wrt.o matches
Binary file ./userprog/build/tests/filesys/base/lg-seq-random matches
Binary file ./userprog/build/tests/filesys/seq-test.o matches
Binary file ./userprog/build/threads/intr-stubs.o matches
Binary file ./userprog/build/lib/user/syscall.o matches
./userprog/build/results:pass tests/userprog/close-bad-fd
./userprog/build/results:pass tests/userprog/read-bad-fd
./userprog/build/results:FAIL tests/userprog/write-bad-fd
./userprog/build/results:FAIL tests/userprog/multi-child-fd
Binary file ./userprog/build/kernel.o matches
./utils/pintos:                           let fdisk guess correct geometry and quiet warnings
./utils/squish-pty.c:make_noncanon (int fd, int vmin, int vtime)
./utils/squish-pty.c:  if (isatty (fd)) 
./utils/squish-pty.c:      if (tcgetattr (fd, &termios) < 0)
./utils/squish-pty.c:      if (tcsetattr (fd, TCSANOW, &termios) < 0)
./utils/squish-pty.c:make_nonblocking (int fd, bool nonblocking) 
./utils/squish-pty.c:  int flags = fcntl (fd, F_GETFL);
./utils/squish-pty.c:  if (fcntl (fd, F_SETFL, flags) < 0)
./utils/squish-pty.c:   Sets *FD to -1 if the fd is no longer readable or writable. */
./utils/squish-pty.c:handle_error (ssize_t retval, int *fd, bool fd_is_pty, const char *call)
./utils/squish-pty.c:  if (fd_is_pty)
./utils/squish-pty.c:              *fd = -1;
./utils/squish-pty.c:          close (*fd);
./utils/squish-pty.c:          *fd = -1;
./utils/squish-pty.c:relay (int pty, int dead_child_fd) 
./utils/squish-pty.c:      fd_set read_fds, write_fds;
./utils/squish-pty.c:      FD_ZERO (&read_fds);
./utils/squish-pty.c:      FD_ZERO (&write_fds);
./utils/squish-pty.c:            FD_SET (p->in, &read_fds);
./utils/squish-pty.c:            FD_SET (p->out, &write_fds); 
./utils/squish-pty.c:      FD_SET (dead_child_fd, &read_fds);
./utils/squish-pty.c:          retval = select (FD_SETSIZE, &read_fds, &write_fds, NULL, NULL); 
./utils/squish-pty.c:      if (FD_ISSET (dead_child_fd, &read_fds))
./utils/squish-pty.c:          if (p->in != -1 && FD_ISSET (p->in, &read_fds))
./utils/squish-pty.c:          if (p->out != -1 && FD_ISSET (p->out, &write_fds)) 
./utils/squish-pty.c:static int dead_child_fd;
./utils/squish-pty.c:  if (write (dead_child_fd, "", 1) < 0)
./utils/squish-pty.c:  int pipe_fds[2];
./utils/squish-pty.c:     to a pipe fd.  We really want to use pselect() and
./utils/squish-pty.c:  if (pipe (pipe_fds) < 0)
./utils/squish-pty.c:  dead_child_fd = pipe_fds[1];
./utils/squish-pty.c:      relay (master, pipe_fds[0]);
./utils/squish-pty.c:      if (close (pipe_fds[0]) < 0 || close (pipe_fds[1]) < 0
./utils/squish-unix.c:make_noncanon (int fd, int vmin, int vtime)
./utils/squish-unix.c:  if (isatty (fd)) 
./utils/squish-unix.c:      if (tcgetattr (fd, &termios) < 0)
./utils/squish-unix.c:      if (tcsetattr (fd, TCSANOW, &termios) < 0)
./utils/squish-unix.c:make_nonblocking (int fd, bool nonblocking) 
./utils/squish-unix.c:  int flags = fcntl (fd, F_GETFL);
./utils/squish-unix.c:  if (fcntl (fd, F_SETFL, flags) < 0)
./utils/squish-unix.c:handle_error (ssize_t retval, int *fd, bool fd_is_sock, const char *call)
./utils/squish-unix.c:      if (fd_is_sock)
./utils/squish-unix.c:          *fd = -1;
./utils/squish-unix.c:      fd_set read_fds, write_fds;
./utils/squish-unix.c:      FD_ZERO (&read_fds);
./utils/squish-unix.c:      FD_ZERO (&write_fds);
./utils/squish-unix.c:            FD_SET (p->in, &read_fds);
./utils/squish-unix.c:            FD_SET (p->out, &write_fds); 
./utils/squish-unix.c:      retval = pselect (FD_SETSIZE, &read_fds, &write_fds, NULL, NULL,
./utils/squish-unix.c:          if (p->in != -1 && FD_ISSET (p->in, &read_fds))
./utils/squish-unix.c:          if (p->out != -1 && FD_ISSET (p->out, &write_fds)) 
./utils/squish-unix.c:          fd_set read_fds;
./utils/squish-unix.c:          FD_ZERO (&read_fds);
./utils/squish-unix.c:          FD_SET (sock, &read_fds);
./utils/squish-unix.c:          retval = pselect (sock + 1, &read_fds, NULL, NULL, NULL, &empty_set);
./utils/pintos-mkdisk:                           let fdisk guess correct geometry and quiet warnings
