../devices/intq.c:      lock_acquire (&q->lock);
../devices/intq.c:      lock_acquire (&q->lock);
../devices/ide.c:  lock_acquire (&c->lock);
../devices/ide.c:  lock_acquire (&c->lock);
../vm/frame.c:	lock_acquire (&frame_table_lock);
../vm/frame.c:	lock_acquire (&frame_table_lock);
../vm/frame.c:	lock_acquire (&frame_table_lock);
../vm/frame.c:	lock_acquire (&frame_table_lock);
../vm/frame.c:	lock_acquire (&frame_table_lock);
../vm/frame.c:	lock_acquire (&frame_table_lock);
../vm/frame.c:	lock_acquire (&frame_table_lock);
../vm/swap.c:	lock_acquire(&swap_lock);
../vm/swap.c:	lock_acquire(&swap_lock);
../vm/swap.c:	lock_acquire(&swap_lock);
../userprog/process.c:			lock_acquire(&global_frame_table_lock);
../userprog/process.c:			lock_acquire(&global_frame_table_lock);
../userprog/exception.c:		lock_acquire(&global_frame_table_lock);
../userprog/exception.c:			lock_acquire(&global_frame_table_lock);
../threads/malloc.c:  lock_acquire (&d->lock);
../threads/malloc.c:          lock_acquire (&d->lock);
../threads/palloc.c:  lock_acquire (&pool->lock);
../threads/palloc.c:  lock_acquire (&pool->lock);
../threads/synch.h:void lock_acquire (struct lock *);
../threads/:q!:  lock_acquire (&tid_lock);
../threads/synch.c:lock_acquire (struct lock *lock)
../threads/synch.c:  lock_acquire (lock);
../threads/thread.c:  lock_acquire (&tid_lock);
../lib/kernel/console.c:   lock_acquire() implementation that caused the panic, we'll
../lib/kernel/console.c:        lock_acquire (&console_lock); 
